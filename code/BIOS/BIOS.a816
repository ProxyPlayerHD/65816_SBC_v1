
.feature string_escapes
.include "SBC.inc"
.import __BSS_LOAD__, __ZEROPAGE_LOAD__


MAGIC_NUMBER	= $DEADBEEF
MAGIC_POINTER	= $000000	; 4 Bytes
TMP_POINTER		= $000004	; 3 Bytes
SEG_COUNTER		= $000007	; 3 Bytes
MEM_COUNTER		= $00000A	; 2 Bytes


.bss



.segment "HiDATA"

SPLASH_STR:
	.byte "Proxy's 65c816 SBC v1\nBIOS ROM v1.1\nAvailable RAM: \x00"

READY_STR:
	.byte "Ready for Program!\n\x00"

FORMAT_SUCZ_STR:
	.byte "PGZ Format recognized!\n\x00"

FORMAT_SUCY_STR:
	.byte "PGY Format recognized!\n\x00"

FORMAT_ERR_STR:
	.byte "\n\nUnsupported Executable Format!\n\n\x00"

TERM_STR:
	.byte "\n\nProgram Termitated with Code: \x00"

HEX_TABLE:
	.byte "0123456789ABCDEF"

QUOTIENT_TABLE:
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01
	.byte $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $03, $03
	.byte $03, $03, $03, $03, $03, $03, $03, $03, $04, $04, $04, $04, $04, $04, $04, $04
	.byte $04, $04, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $06, $06, $06, $06
	.byte $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
	.byte $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $09
	.byte $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0A, $0A, $0A, $0A, $0A, $0A, $0B, $0B
	.byte $0B, $0B, $0B, $0B, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C
	.byte $0C, $0C, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0E
	.byte $0E, $0E, $0E, $0E, $0E, $0E, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
	.byte $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $11, $11, $11, $11, $11, $11
	.byte $11, $11, $11, $11, $12, $12, $12, $12, $12, $12, $12, $12, $12, $12, $13, $13
	.byte $13, $13, $13, $13, $13, $13, $13, $13, $14, $14, $14, $14, $14, $14, $14, $14
	.byte $14, $14, $15, $15, $15, $15, $15, $15, $15, $15, $15, $15, $16, $16, $16, $16
	.byte $16, $16, $16, $16, $16, $16, $17, $17, $17, $17, $17, $17, $17, $17, $17, $17
	.byte $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $19, $19, $19, $19, $19, $19

REMAINDER_TABLE:
	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05
	.byte $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01
	.byte $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07
	.byte $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03
	.byte $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05
	.byte $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01
	.byte $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07
	.byte $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03
	.byte $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05
	.byte $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01
	.byte $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07
	.byte $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03
	.byte $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $00, $01, $02, $03, $04, $05





.segment "HiCODE"

RESET:
	ai16
	LDX #$FEFF						; Set the Stack to $FEFF
	TXS
	LDA #$0000						; Set the Direct Page to $0000
	TCD
	accu8
	LDA #%01111111
	STA f:VIA_IER
	LDA #%00000000
	STA f:VIA_DDRA
	STA f:VIA_ORA
	STA f:VIA_ORB
	STA f:CTRL
	LDA #%10000000
	STA f:VIA_DDRB
	
	LDA #T1_MODE3
	STA VIA_ACR						; Set up the T1 Timer to generate a square wave on PB7
	accu16
	LDA #CLK_20M					; Use a Constant depending on the expected CPU Clock
	STA VIA_T1C16					; And Throw it into the T1 Timer
	accu8
	LDA #CTRL_T1I
	STA f:CTRL						; Enable the Timer Interrupt
	
	LDA #$01
	PHA
	PLB
	
	
CHECK_BOOT:
	; See if the System comes from a Cold or Warm Reset by checking if the Magic Number is present
	accu16
	LDA f:MAGIC_POINTER
	CMP # .LOWORD(MAGIC_NUMBER)
	BNE @cold
	LDA f:MAGIC_POINTER + 2
	CMP # .HIWORD(MAGIC_NUMBER)
	BNE @cold
	accu8
	BRA @warm
	
	@cold:
	.A16
	LDA # .LOWORD(MAGIC_NUMBER)		; Set up the Magic Number if it's a Cold Start
	STA f:MAGIC_POINTER
	LDA # .HIWORD(MAGIC_NUMBER)
	STA f:MAGIC_POINTER + 2
	accu8
	
	; Count the amount of Additional RAM installed (if any)
	STZ z:MEM_COUNTER
	PHB								; Save the Data Bank
	LDA #16
	PHA
	PLB								; Start Counting from Bank 16 (1MB)
	LDX #2
	@cnt_loop:
		LDA a:$6969					; Get a Byte from Memory
		EOR #$FF					; Invert it (I'm still kinda mad XOR is not a valid alternative to EOR)
		PHA							; Save a copy to the Stack
		STA a:$6969					; Write the Byte back to Memory
		NOP
		NOP
		PLA							; Get the Copy back
		CMP a:$6969					; And Compare it to the one in Memory
		BNE @fail					; If they are not the same, it marks the end of Memory
		PHB
		PLA
		CLC
		ADC #8						; Otherwise, Move to the next Half Megabyte (8 Banks)
		PHA
		PLB
		INX							; And Increment the Counter
	BNE @cnt_loop
	
	@fail:
	PLB								; Restore the Data Bank
	TXA
	PHA								; Save the counted Memory amount
	
	LDX #500
	@loop:
		WAI
		DEX
	BNE @loop						; Then wait for 5 seconds before continuing
	
	LDX #100
	LDY # .LOWORD(SPLASH_STR)
	JSR PRINT_STR					; Afterwards, print the Splash Text
	
	PLA
	LSR A
	PHP
	JSR PRINT_D8					; Then print the amount of counted Memory
	LDA #'.'
	JSR PRINT_CHAR					; Add a Decimal point
	PLP
	BCC @even
	LDA #'5'
	JSR PRINT_CHAR
	BRA @skip
	
	@even:
	LDA #'0'
	JSR PRINT_CHAR					; And then either print a 0 or 5 depending on the "fractional" bit of the MB counter
	@skip:
	LDA #'M'
	JSR PRINT_CHAR
	LDA #'B'
	JSR PRINT_CHAR					; Then print "MB" after the number
	LDA #$0A						; '\n' is not an accepted character for some reason
	JSR PRINT_CHAR
	JSR PRINT_CHAR
	
	@warm:							; if it's a Warm Start, skip all of the above
	
FLUSH_SERIAL:
	LDA f:CTRL						; Load from the CTRL register
	AND #FT_RXF						; and Check the RXF status bit in it
	BNE @exit						; If it's 1, then the incoming buffer is empty, so exit
	LDA f:SERIAL					; If it's 0, then there is more data in the buffer to read
	BRA FLUSH_SERIAL
	@exit:
	
	
	
READY_TEXT:
	LDX #100
	LDY # .LOWORD(READY_STR)
	JSR PRINT_STR
	
	
	
	; Load Program from Serial:
	
	; * Check Header (ASCII "Z" = PGZ, ASCII "Y" = PGY)
HEADER_CHK:
	JSR GET_CHAR
	; CMP #'Y'
	; BEQ PGY_FORMAT
	CMP #'Z'
	BEQ PGZ_FORMAT
	
	LDX #100
	LDY # .LOWORD(FORMAT_ERR_STR)
	JSR PRINT_STR
	JMP RESET
STP

; PGY_FORMAT:
	
	
	; @EXIT:
	; PHK
	; PEA .LOWORD(TERMINATION - 1)
	; JML [TMP_POINTER]
; STP

; TMP_POINTER
; SEG_COUNTER

PGZ_FORMAT:
	LDX #100
	LDY # .LOWORD(FORMAT_SUCZ_STR)
	JSR PRINT_STR
	@loop:
		LDY #0
		LDX #0
		LDA #$0A
		JSR PRINT_CHAR
		JSR PRINT_CHAR
		
		; Get the 24-bit Address where to load the Segment to
		JSR GET_CHAR
		STA TMP_POINTER
		JSR GET_CHAR
		STA TMP_POINTER + 1
		JSR GET_CHAR
		STA TMP_POINTER + 2
		
		JSR PRINT_H8
		LDA TMP_POINTER + 1
		JSR PRINT_H8
		LDA TMP_POINTER
		JSR PRINT_H8
		LDA #$0A
		JSR PRINT_CHAR
		
		; Get the total Size of the Segment
		JSR GET_CHAR
		STA SEG_COUNTER
		JSR GET_CHAR
		STA SEG_COUNTER + 1
		JSR GET_CHAR
		STA SEG_COUNTER + 2
		
		JSR PRINT_H8
		LDA SEG_COUNTER + 1
		JSR PRINT_H8
		LDA SEG_COUNTER
		JSR PRINT_H8
		LDA #$0A
		JSR PRINT_CHAR
		
		; Check if SEG_COUNTER is already 0, and exit the loop if it is
		LDA SEG_COUNTER
		BNE @copy
		LDA SEG_COUNTER + 1
		BNE @copy
		LDA SEG_COUNTER + 1
		BNE @copy
		BRA @exit
		
		
		@copy:
			; Decrement the 24-bit SEG_COUNTER by 1 and check if it reached -1
			CLC
			LDA SEG_COUNTER
			SBC #0
			STA SEG_COUNTER
			LDA SEG_COUNTER + 1
			SBC #0
			STA SEG_COUNTER + 1
			LDA SEG_COUNTER + 2
			SBC #0
			STA SEG_COUNTER + 2
			BCC @eol
			
			JSR GET_CHAR
			STA [TMP_POINTER],Y		; Grab a Byte and Throw it into Memory
			INY						; Point to the next location in Memory
			BNE @skipy
			INC TMP_POINTER + 2		; If Y Overflowed to 0, increment the high byte of the pointer
			@skipy:
			INX
			
			JSR PRINT_H8
			LDA #' '
			JSR PRINT_CHAR
			CPX #15
			BNE @copy
			LDX #0
			LDA #$0A
			JSR PRINT_CHAR
		BRA @copy
		@eol:
	BRL @loop
	@exit:
	PHK
	PEA .LOWORD(TERMINATION - 1)
JML [TMP_POINTER]


TERMINATION:
	accu8
	index16
	PHA
	LDA #$01
	PHA
	PLB
	LDX #100
	LDY # .LOWORD(TERM_STR)
	JSR PRINT_STR
	PLA
	JSR PRINT_H8
	LDA #$0A
	JSR PRINT_CHAR
	JSR PRINT_CHAR
JMP RESET













; Get a Byte from SERIAL
GET_CHAR:
	.A8
	.I16				; Assumes 8-bit A and 16-bit X/Y
	@loop:
		LDA f:CTRL		; Load from the CTRL register
		AND #FT_RXF		; and Check the RXF status bit in it
	BNE @loop
	LDA f:SERIAL		; Load the Byte
RTS						; And Return


; Prints a String pointed by DB:Y to SERIAL
; X Holds the Maximum amount of Characters allowed in a string
PRINT_STR:
	.A8
	.I16				; Assumes 8-bit A and 16-bit X/Y
	@loop:
		LDA f:CTRL		; Load from the CTRL register
		AND #FT_TXE		; and Check the TXE status bit in it
	BNE @loop
		LDA a:$0000,Y	; Load a Byte from DB:Y
		BEQ @exit		; If it's 0, exit the function
		STA f:SERIAL	; Otherwise write it to SERIAL
		INY				; Increment the Pointer to the String
		DEX				; And Decrement the Character Limit
	BNE @loop			; If it reached 0, exit the function
	@exit:
RTS


; Prints a single Character from A to SERIAL
PRINT_CHAR:
	.A8
	.I16				; Assumes 8-bit A and 16-bit X/Y
	PHA					; Save A
	@wait:
		LDA f:CTRL		; Load from the CTRL register
		AND #FT_TXE		; and Check the TXE status bit in it
	BNE @wait
	PLA					; Get A back
	STA f:SERIAL		; And Print it
RTS


; Prints an 8-bit value as Hexadecimal to SERIAL
PRINT_H8:
	.A8
	.I16				; Assumes 8-bit A and 16-bit X/Y
	PHX
	PHY					; Preserve X and Y
	index8
	PHA					; Push a Copy of A
	LSR
	LSR
	LSR
	LSR					; Push the High Nibble into the Low Nibble
	AND #$0F			; Remove the High Nibble
	TAX					; Throw it into X
	LDA f:HEX_TABLE,X	; Get the Character from the HEX Table
	JSR PRINT_CHAR		; And Print it to Serial
	PLA					; Get the copy of A
	AND #$0F			; Remove the High Nibble
	TAX					; Throw it into X
	LDA f:HEX_TABLE,X	; Get the Character from the HEX Table
	JSR PRINT_CHAR		; And Print it to Serial
	index16
	PLY
	PLX					; Restore X and Y
RTS						; And Return


; Prints an 8-bit value as Decimal to SERIAL
PRINT_D8:
	.A8
	.I16				; Assumes 8-bit A and 16-bit X/Y
	PHX
	PHY					; Preserve X and Y
	index8
	LDX #$FF
	PHX
	CMP #10
	BCC @L2
		@L1:
			TAX
			LDA REMAINDER_TABLE,X
			CLC
			ADC #'0'
			PHA
			LDA QUOTIENT_TABLE,X
			CMP #10
		BCS @L1
	@L2:
	CLC
	ADC #'0'
	@L3:
		JSR PRINT_CHAR
		PLA
	BPL @L3
	index16
	PLY
	PLX					; Restore X and Y
RTS						; And Return






.segment "LoCODE"

ISR_BASE = __BSS_LOAD__

RST_INIT:
	.A8
	.I8
	SEI
	CLD
	CLC
	XCE
	JML RESET

BRK_INIT:
	NOP
JML ISR_BASE

COP_INIT:
	; NOP
JML ISR_BASE + 4

IRQ_INIT:
	; NOP
JML ISR_BASE + 8

NMI_INIT:
	; NOP
JML ISR_BASE + 12

ABT_INIT:
	; NOP
JML ISR_BASE + 16

TER_INIT:
	; NOP
JML TERMINATION


.segment "VECTORS"
NATIVE_VEC:
.word .LOWORD(COP_INIT)
.word .LOWORD(BRK_INIT)
.word .LOWORD(ABT_INIT)
.word .LOWORD(NMI_INIT)
.word $0000
.word .LOWORD(IRQ_INIT)

.word .LOWORD(TER_INIT)
.word $0000

EMU_VEC:
.word .LOWORD(COP_INIT)
.word $0000
.word .LOWORD(ABT_INIT)
.word .LOWORD(NMI_INIT)
.word .LOWORD(RST_INIT)
.word .LOWORD(IRQ_INIT)
